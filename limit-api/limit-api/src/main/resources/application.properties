server.port = 9092
#
##Proprty or MySql Database
##propty to aws rds
##spring.datasource.url=jdbc:mysql://payment-database.cisvkkmo2juh.us-east-2.rds.amazonaws.com:3306/paymentdb
#
##property for docker but failing on build
## mysqllimitdb this is mysql container name, paymentdb is database name
#
##local property

#spring.datasource.driver-class-name= com.mysql.cj.jdbc.Driver
#spring.datasource.url=jdbc:mysql://localhost:3306/paymentdb
#spring.datasource.username=root
##spring.datasource.password=GlobantSandeep
#spring.datasource.password = Sandeep@123
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect

#------------ DOCKER-------------------------------------------------------
##property for docker but failing on build
## suppose i have mysqllimitdb and it is mysql container name, paymentdb is database name
#docker command:-
# docker run -p 3306:3306 --name mysqllimitdb --network network-name mysql:8
#spring.datasource.url=jdbc:mysql://mysqllimitdb:3306/paymentdb

#If we are using docker-compose, then we can use sql container name instead of local host like above one.
# OR we can use spring env variable like SPRING_DATASOURCE_URL in docker compose.

#------------------- KUBERNATES -------------------------------------------------------------------------------
# If we are using kubernates , we can use mysqlservicename.namespace
# OR we can use localhost if we are using multicontainers in one pod (suppose we are including mysql container in limit container)
spring.datasource.url=jdbc:mysql://localhost:3306/paymentdb
spring.datasource.username=root
spring.datasource.password=Sandeep@123
spring.datasource.platform=mysql
spring.datasource.initialization-mode=always
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect